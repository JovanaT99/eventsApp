generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id            Int               @id @default(autoincrement())
  name          String
  imageUrl      String
  priority      Int
  subCategories String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  comments      CategoryComment[]
  events        Event[]
}

model Event {
  id                   Int               @id @default(autoincrement())
  userId               Int
  categoryId           Int
  name                 String
  subCategory          String
  location             String
  lat                  Float
  lng                  Float
  startAt              DateTime
  suggestedPeopleCount Int
  duration             Int
  description          String
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  deletedAt            DateTime?
  category             Category          @relation(fields: [categoryId], references: [id])
  user                 User              @relation(fields: [userId], references: [id])
  attendances          EventAttendance[]
  images               EventImage[]
  messages             EventMessage[]
}

model EventAttendance {
  id           Int       @id @default(autoincrement())
  eventId      Int
  userId       Int
  status       String
  attendanceAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  deletedAt    DateTime?
  event        Event     @relation(fields: [eventId], references: [id])
  user         User      @relation(fields: [userId], references: [id])
}

model User {
  id               Int               @id @default(autoincrement())
  nickname         String
  email            String            @unique
  imageUrl         String?
  type             String
  companyId        Int?
  reputation       Float
  phoneNumber      String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?
  categoryComments CategoryComment[]
  events           Event[]
  attendances      EventAttendance[]
  images           EventImage[]
  messages         EventMessage[]
  reviews          Review[]
  company          Company?          @relation(fields: [companyId], references: [id])
}

model Company {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  imageUrl    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  deletedAt   DateTime?
  users       User[]
}

model EventMessage {
  id             Int       @id @default(autoincrement())
  eventId        Int
  userId         Int
  content        String
  attendenceOnly Boolean
  createdAt      DateTime  @default(now())
  updatedAt      DateTime   @updatedAt
  deletedAt      DateTime?
  event          Event     @relation(fields: [eventId], references: [id])
  user           User      @relation(fields: [userId], references: [id])
}

model Review {
  id         Int       @id @default(autoincrement())
  userId     Int
  targetId   Int
  targetType String
  content    String
  rate       Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  deletedAt  DateTime?
  user       User      @relation(fields: [userId], references: [id])
}

model EventImage {
  id         Int       @id @default(autoincrement())
  eventId    Int
  userId     Int
  imageUrl   String
  approvedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  deletedAt  DateTime?
  event      Event     @relation(fields: [eventId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

model CategoryComment {
  id         Int       @id @default(autoincrement())
  categoryId Int
  userId     Int
  content    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  deletedAt  DateTime?
  category   Category  @relation(fields: [categoryId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}
